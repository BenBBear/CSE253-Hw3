name: "Question"

## Data Layer for train/test
layer {
  name: "cifar"
  type: "Data"
  top: "data"
  top: "label"
  data_param {
    source: "data/cifar100-dtrain-normalize"
    batch_size: 100
    backend: LMDB
  }
  include: { phase: TRAIN }
}

layer {
  name: "cifar"
  type: "Data"
  top: "data"
  top: "label"
  data_param {
    source: "data/cifar100-dtest-normalize"
    batch_size: 100
    backend: LMDB
  }
  include: {
    phase: TEST
  }
}

layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 64
    pad: 1
    kernel_size: 5
    stride: 1
    weight_filler {
      type: "gaussian"
      std: 0.0001
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "conv1"
  top: "relu1"
}


layer {
  name: "conv1a"
  type: "Convolution"
  bottom: "relu1"
  top: "conv1a"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  convolution_param {
    num_output: 42
    pad: 1
    kernel_size: 4
    stride: 2
    weight_filler {
      type: "gaussian"
      std: 0.0001
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "relu1a"
  type: "ReLU"
  bottom: "conv1a"
  top: "relu1a"
}




layer {
    name: "conv2"
    type: "Convolution"
    bottom: "relu1a"
    top: "conv2"
    param {
        lr_mult: 1
    }
    param {
        lr_mult: 2
    }
    convolution_param {
        num_output: 32
        pad: 1
        kernel_size: 3
        stride: 1
        weight_filler {
            type: "gaussian"
            std: 0.01
        }
        bias_filler {
            type: "constant"
        }
    }
}
layer {
    name: "relu2"
    type: "ReLU"
    bottom: "conv2"
    top: "relu2"
}

layer {
    name: "pool2"
    type: "Pooling"
    bottom: "relu2"
    top: "pool2"
    pooling_param {
        pool: MAX
        pad: 1
        kernel_size: 3
        stride: 1
    }
}


layer {
    name: "drop2"
    type: "Dropout"
    bottom: "pool2"
    top: "drop2"
    dropout_param {
        dropout_ratio: 0.5
    }
}


layer {
    name: "conv3"
    type: "Convolution"
    bottom: "drop2"
    top: "conv3"
    param {
        lr_mult: 1
    }
    param {
        lr_mult: 2
    }
    convolution_param {
        num_output: 16
        pad: 1
        kernel_size: 2
        stride: 1
        weight_filler {
            type: "gaussian"
            std: 0.01
        }
        bias_filler {
            type: "constant"
        }
    }
}
layer {
    name: "relu3"
    type: "ReLU"
    bottom: "conv3"
    top: "relu3"
}


layer {
    name: "drop3"
    type: "Dropout"
    bottom: "relu3"
    top: "drop3"
    dropout_param {
        dropout_ratio: 0.5
    }
}

layer {
  name: "fc1"
  type: "InnerProduct"
  bottom: "drop3"
  top: "fc1"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 768
    weight_filler {
      type: "gaussian"
      std: 0.1
    }
    bias_filler {
      type: "constant"
    }
  }
}

# layer {
#     name: "dropFC1"
#     type: "Dropout"
#     bottom: "fc1"
#     top: "dropFC1"
#     dropout_param {
#         dropout_ratio: 0.35
#     }
# }

# layer {
#   name: "reluFC1"
#   type: "ReLU"
#   bottom: "fc1"
#   top: "reluFC1"
# }


layer {
  name: "fc2"
  type: "InnerProduct"
  bottom: "fc1"
  top: "fc2"
  param {
    lr_mult: 1
  }
  param {
    lr_mult: 2
  }
  inner_product_param {
    num_output: 100
    weight_filler {
      type: "gaussian"
      std: 0.1
    }
    bias_filler {
      type: "constant"
    }
  }
}




layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "fc2"
  bottom: "label"
  top: "accuracy"
  # include {
  #   phase: TEST
  # }
}

layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "fc2"
  bottom: "label"
  top: "loss"
}
